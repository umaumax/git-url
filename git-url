#!/usr/bin/env bash

BLACK="\033[0;30m" RED="\033[0;31m" GREEN="\033[0;32m" YELLOW="\033[0;33m" BLUE="\033[0;34m" PURPLE="\033[0;35m" LIGHT_BLUE="\033[0;36m" WHITE="\033[0;37m" GRAY="\033[0;39m" DEFAULT="\033[0m"
function echo() { command echo -e "$@"; }

function main() {
  # NOTE: to avoid 'sed: -e expression #1, char 20: Invalid range end'
  LANG=ja_JP.UTF-8

  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "${RED}no git repo here!${DEFAULT}" >&2
    return 1
  fi

  local url=$(git config remote.origin.url)
  local branch=''
  [[ -z $url ]] && echo "$0 [--branch branch] [--tree|--commits] [filepath] [line no]" && return 1
  local no_filepath_default_object='tree'
  [[ $1 == '--branch' ]] && branch="$2" && shift 2
  [[ $1 == '--tree' ]] && shift
  [[ $1 == '--commits' ]] && no_filepath_default_object='commits' && shift
  local filepath=$1
  if [[ -n $filepath ]]; then
    if [[ ! -e $filepath ]]; then
      echo 1>&2 "no such file or dir '$filepath'"
      return 1
    fi
    filepath=$(git rev-parse --show-prefix $filepath | tr -d '\n')
  fi
  [[ $filepath == '.' ]] && filepath=''
  local lineno=$2

  local ret=$(echo $url | sed -E 's@^[a-z]+://@@' | sed -E 's:^[a-zA-z._0-9]+@::' | sed -E 's:\.git$::')
  local host_repo=$(echo $ret | sed -E 's@^([^:/]*)((:[0-9]+)/|:([^/]+/)|/)(.*)$@\1 \4\5@')
  local host=$(echo $host_repo | awk '{print $1}')
  local org_repo=$(echo $host_repo | awk '{print $2}')
  local org=$(basename ${org_repo%/*})
  local repo=$(basename $org_repo)

  [[ -z $host ]] && echo "$0 parse error $ret" && return 1

  # NOTE: setting file ~/.ssh/config
  local web_url=$(ssh -G $host 2>/dev/null | grep -A 1 WEB_URL | grep -v WEB_URL | awk '{print $2}')
  [[ -z $web_url ]] && web_url=$host
  local web_type='gerrit'
  echo $web_url | grep -q github && web_type='github'
  echo $web_url | grep -q gitlab && web_type='gitlab'
  echo $web_url | grep -q bitbucket && web_type='bitbucket'

  local refs=""
  if [[ -z $branch ]]; then
    branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "master")
    # NOTE: if local branch -> set near remote branch
    if ! git show-ref --quiet --verify -- "refs/remotes/origin/$branch"; then
      branch=$(git rev-list --format='%D' HEAD --max-parents=1 | grep -o 'origin/[^ ]*' | sed -e 's:^origin/::g' -e 's/,//g' | head -n 1 | cut -d' ' -f1)
      [[ -z $branch ]] && branch="master"
    fi
  fi
  refs="$branch"
  # tag is hight priority
  local tag=$(git describe --tags --abbrev=0 2>/dev/null)
  if [[ "$refs" == "HEAD" ]] && [[ -n "$tag" ]]; then
    if [[ $web_type == "bitbucket" ]]; then
      refs="refs/tags/$tag"
    else
      refs="$tag"
    fi
  fi

  local object='blob'
  local gerrit_f=";f=$filepath"
  # NOTE: no file
  if [[ -z $filepath ]]; then
    local object=$no_filepath_default_object
    local gerrit_f=""
  fi
  if [[ $web_type == "github" ]]; then
    local web_link="$web_url/$org/$repo/$object/$refs/$filepath"
    local line_prefix='#L'
  elif [[ $web_type == "gitlab" ]]; then
    local web_link="$web_url/$org/$repo/$object/$refs/$filepath"
    local line_prefix='#L'
  elif [[ $web_type == "bitbucket" ]]; then
    local web_link="$web_url/$org/repos/$repo/browse/$filepath?at=$refs"
    local line_prefix='#'
  else # gerrit?
    local web_link="$web_url/gitweb?p=$org/$repo.git$gerrit_f;hb=refs/heads/$refs"
    local line_prefix='#l'
  fi
  if [[ -n $lineno ]]; then
    local web_link="${web_link}${line_prefix}${lineno}"
  fi

  # NOTE: default https://
  [[ ! $web_link =~ ^(https?|ftp|file):// ]] && web_link="https://$web_link"
  echo "$web_link"
}
main "$@"

function is_git_repo_with_message() {
  local message=${1:-"${RED}no git repo here!${DEFAULT}"}
  is_git_repo
  local code=$?
  [[ $code != 0 ]] && echo "$message" >&2
  return $code
}

# github: "git@github.com:user/repo.git"
#         "https://github.com/user/repo.git"
# gerrit: "ssh://user@xxx.co.jp:12345/pj/repo"
# gitlab: "ssh://git@xxx-gitlab.co.jp:12345/user/repo.git"
